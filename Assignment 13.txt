Q.1


class Solution
{


static class Node
{
	int data;
	Node next;
};

static Node insert(Node root, int item)
{
	Node ptr, temp;
	temp = new Node();
	temp.data = item;
	temp.next = null;

	if (root == null)
		root = temp;
	else {
		ptr = root;
		while (ptr.next != null)
			ptr = ptr.next;

		ptr.next = temp;
	}
	return root;
}


static Node newList(Node root1, Node root2)
{
	Node ptr1 = root1, ptr2 = root2, ptr;
	Node root = null, temp;

	while (ptr1 != null) {
		temp = new Node();
		temp.next = null;

		// Compare for greater node
		if (ptr1.data < ptr2.data)
			temp.data = ptr2.data;
		else
			temp.data = ptr1.data;

		if (root == null)
			root = temp;
		else {
			ptr = root;
			while (ptr.next != null)
				ptr = ptr.next;

			ptr.next = temp;
		}
		ptr1 = ptr1.next;
		ptr2 = ptr2.next;
	}
	return root;
}

static void display(Node root)
{
	while (root != null)
	{
		System.out.print( root.data + "->");
		root = root.next;
	}
	System.out.println();
}


public static void main(String args[])
{
	Node root1 = null, root2 = null, root = null;


	root1=insert(root1, 5);
	root1=insert(root1, 2);
	root1=insert(root1, 3);
	root1=insert(root1, 8);

	System.out.print("First List: ");
	display(root1);

	
	root2=insert(root2, 1);
	root2=insert(root2, 7);
	root2=insert(root2, 4);
	root2=insert(root2, 5);

	System.out.print( "Second List: ");
	display(root2);

	root = newList(root1, root2);
	System.out.print("New List: ");
	display(root);
}
}







Q.2

class Solution {
	Node head; 
	class Node {
		int data;
		Node next;
		Node(int d)
		{
			data = d;
			next = null;
		}
	}

	void removeDuplicates()
	{
		
		Node curr = head;

		
		while (curr != null) {
			Node temp = curr;
			
			while (temp != null && temp.data == curr.data) {
				temp = temp.next;
			}
			curr.next = temp;
			curr = curr.next;
		}
	}



	
	public void push(int new_data)
	{

		Node new_node = new Node(new_data);

		
		new_node.next = head;

		
		head = new_node;
	}

	void printList()
	{
		Node temp = head;
		while (temp != null) {
			System.out.print(temp.data + " ");
			temp = temp.next;
		}
		System.out.println();
	}


	public static void main(String args[])
	{
		LinkedList llist = new LinkedList();
		llist.push(20);
		llist.push(13);
		llist.push(13);
		llist.push(11);
		llist.push(11);
		llist.push(11);

		System.out.println("List before removal of duplicates");
		llist.printList();

		llist.removeDuplicates();

		System.out.println("List after removal of elements");
		llist.printList();
	}
}







Q.4

class Solution {

	static Node head;

	class Node {

		int data;
		Node next;

		Node(int d) {
			data = d;
			next = null;
		}
	}


	Node kAltReverse(Node node, int k) {
		Node current = node;
		Node next = null, prev = null;
		int count = 0;

		
		while (current != null && count < k) {
			next = current.next;
			current.next = prev;
			prev = current;
			current = next;
			count++;
		}

		
		if (node != null) {
			node.next = current;
		}

		
		count = 0;
		while (count < k - 1 && current != null) {
			current = current.next;
			count++;
		}

		
		if (current != null) {
			current.next = kAltReverse(current.next, k);
		}

		
		return prev;
	}

	void printList(Node node) {
		while (node != null) {
			System.out.print(node.data + " ");
			node = node.next;
		}
	}

	void push(int newdata) {
		Node mynode = new Node(newdata);
		mynode.next = head;
		head = mynode;
	}

	public static void main(String[] args) {
		LinkedList list = new LinkedList();

		
		for (int i = 20; i > 0; i--) {
			list.push(i);
		}
		System.out.println("Given Linked List :");
		list.printList(head);
		head = list.kAltReverse(head, 3);
		System.out.println("");
		System.out.println("Modified Linked List :");
		list.printList(head);

	}
}






Q.6

class Node {
	int key;
	Node next;

	public Node(int key) {
		this.key = key;
		next = null;
	}
}

public class Main {
	
	public static Node newNode(int key) {
		return new Node(key);
	}

	
	public static void main(String[] args) {
		
		Node a = new Node(5);
		a.next = new Node(10);
		a.next.next = new Node(15);
		a.next.next.next = new Node(40);

		Node b = new Node(2);
		b.next = new Node(3);
		b.next.next = new Node(20);

		List<Integer> v = new ArrayList<>();
		while (a != null) {
			v.add(a.key);
			a = a.next;
		}

		while (b != null) {
			v.add(b.key);
			b = b.next;
		}

		Collections.sort(v);
		Node result = new Node(-1);
		Node temp = result;
		for (int i = 0; i < v.size(); i++) {
			result.next = new Node(v.get(i));
			result = result.next;
		}

		temp = temp.next;
		System.out.print("Resultant Merge Linked List is : ");
		while (temp != null) {
			System.out.print(temp.key + " ");
			temp = temp.next;
		}
	}
}





Q.7

class Solution {

	static Node head;

	static class Node {

		int data;
		Node next, prev;

		Node(int d)
		{
			data = d;
			next = prev = null;
		}
	}

	
	void reverse()
	{
		Node temp = null;
		Node current = head;

		
		while (current != null) {
			temp = current.prev;
			current.prev = current.next;
			current.next = temp;
			current = current.prev;
		}

	
		if (temp != null) {
			head = temp.prev;
		}
	}

	
	void push(int new_data)
	{
		
		Node new_node = new Node(new_data);

		
		new_node.prev = null;


		new_node.next = head;


		if (head != null) {
			head.prev = new_node;
		}

		head = new_node;
	}

	
	void printList(Node node)
	{
		while (node != null) {
			System.out.print(node.data + " ");
			node = node.next;
		}
	}

	
	public static void main(String[] args)
	{
		LinkedList list = new LinkedList();

		
		list.push(2);
		list.push(4);
		list.push(8);
		list.push(10);

		System.out.println("Original linked list ");
		list.printList(head);
		
		
		list.reverse();
	
		System.out.println("");
		System.out.println("The reversed Linked List is ");
		list.printList(head);
	}
}





Q.8

class Node
{
	int data;
	Node next, prev;
}

class Solution
{

	static Node deleteNode(Node del)
	{
		
		if (head == null || del == null)
			return null;


		if (head == del)
			head = del.next;

		
		if (del.next != null)
			del.next.prev = del.prev;


		if (del.prev != null)
			del.prev.next = del.next;

		del = null;

		return head;
	}

	static void deleteNodeAtGivenPos(int n)
	{
		
		if (head == null || n <= 0)
			return;

		Node current = head;
		int i;

		
		for (i = 1; current != null && i < n; i++)
		{
			current = current.next;
		}
		
		
		if (current == null)
			return;

		
		deleteNode(current);
	}


	static void push(int new_data)
	{
		
		Node new_node = new Node();

		new_node.data = new_data;



		new_node.prev = null;

		
		new_node.next = head;

	
		if (head != null)
			head.prev = new_node;

		
		head = new_node;
	}


	static void printList()
	{
		Node temp = head;
		if (temp == null)
			System.out.print("Doubly Linked list empty");

		while (temp != null)
		{
			System.out.print(temp.data + " ");
			temp = temp.next;
		}
		System.out.println();
	}

	
	public static void main(String[] args)
	{
		

		push(5);
		push(2);
		push(4);
		push(8);
		push(10);

		System.out.println("Doubly linked "+"list before deletion:");
		printList();

		int n = 2;
		
		
		deleteNodeAtGivenPos(n);
		System.out.println("Doubly linked "+"list after deletion:");
		printList();
	}
}


