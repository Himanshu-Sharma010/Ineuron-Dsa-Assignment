Q.1
class Solution {
    public int minimumDeleteSum(String s1, String s2) {
        int n = s1.length(), m = s2.length();
        int ASCII_sum = 0;

        for (int i = 0; i < n; i++)
            ASCII_sum += s1.charAt(i);
        
        for (int i = 0; i < m; i++) 
            ASCII_sum += s2.charAt(i);

        int[][] dp = new int[n+1][m+1];

        int ans = ASCII_sum;
        for (int r = 0; r < n+1; r++) {
            for (int c = 0; c < m+1; c++) {
                if(r == 0 || c == 0)
                    dp[r][c] = ASCII_sum;
                else if (s1.charAt(r-1) == s2.charAt(c-1)){
                    dp[r][c] = dp[r-1][c-1] - 2*s1.charAt(r-1);
                    ans = Math.min(ans, dp[r][c]);
                }else {
                    dp[r][c] = Math.min(dp[r-1][c], dp[r][c-1]);
                }
            }
        }

        return ans;
    }
}






Q.3
class Solution {
    public int minDistance(String word1,String word2){
        if (word1.length() == 0) {
            return word2.length();
        }
        if (word2.length() == 0) {
            return word1.length();
        }
        int n = word1.length();
        int m = word2.length();
        int[][] dp = new int[2][m + 1];
        for (int i = 1; i <= n; i++) {
            Arrays.fill(dp[1],0);
            for (int j=1;j<=m;j++) {
                if (word1.charAt(i-1) == word2.charAt(j - 1)) {
                    dp[1][j] = dp[0][j - 1] + 1;
                } else {
                    dp[1][j] = Math.max(dp[0][j], dp[1][j - 1]);
                }
            }
            System.arraycopy(dp[1],0,dp[0],0,m+1);
        }
        return m + n-2*dp[1][m];
    }
}






Q.5
public int compress(char[] chars) {
        int index = 0, count = 0;
      
        for (int i = 0; i < chars.length; i++) {
            count++; 
            if (i+1 == chars.length || chars[i] != chars[i+1]) {
                chars[index++] = chars[i];
                
                if (count != 1) {
                    for (char c : Integer.toString(count).toCharArray()) {
                        chars[index++] = c;
                    }
                }
               
                count = 0;
            }
        }
        return index;
    }





Q.7
int i = 0;
public String decodeString(String s) {
    StringBuilder sb = new StringBuilder();
    int count = 0;
    String tmp_string = "";
    
    while (i < s.length()) {
        char c = s.charAt(i);
        i++;
        
        if (c == '[') {
            tmp_string = decodeString(s); 
            for (int j = 0; j < count; j++) {
                sb.append(tmp_string);
            }
            count = 0; 
        } else if (c == ']') { 
            break;
        } else if (Character.isAlphabetic(c)) {
            sb.append(c);
        } else {
            count = count * 10 + c - '0';
        }
    }
    
    return sb.toString();
}










