Q.2

class Solution {


	static void printPrevSmaller(int[] arr, int n)
	{
		
		System.out.print("_, ");
		
		for (int i = 1; i < n; i++) {
			
			int j;
			for (j = i - 1; j >= 0; j--) {
				if (arr[j] < arr[i]) {
					System.out.print(arr[j] + ", ");
					break;
				}
			}
		
			if (j == -1)
				System.out.print("_, ");
		}
	}

	
	public static void main(String[] args)
	{
		int[] arr = { 1, 3, 0, 2, 5 };
		int n = arr.length;
		printPrevSmaller(arr, n);
	}
}








Q.3


class Solution{

	static class Stack {
		
		static Queue<Integer> q1
			= new LinkedList<Integer>();
		static Queue<Integer> q2
			= new LinkedList<Integer>();

		
		static int curr_size;

		static void push(int x)
		{
			
			q2.add(x);

			
			while (!q1.isEmpty()) {
				q2.add(q1.peek());
				q1.remove();
			}

		
			Queue<Integer> q = q1;
			q1 = q2;
			q2 = q;
		}

		static void pop()
		{

			
			if (q1.isEmpty())
				return;
			q1.remove();
		}

		static int top()
		{
			if (q1.isEmpty())
				return -1;
			return q1.peek();
		}

		static int size() { return q1.size(); }
	}


	public static void main(String[] args)
	{
		Stack s = new Stack();
		
		s.push(2);
		s.push(3);

		System.out.println("current size: " + s.size());
		System.out.println(s.top());
		s.pop();
		System.out.println(s.top());
		s.pop();
		System.out.println(s.top());

		System.out.println("current size: " + s.size());
	}
}







Q.4

class Solution {

	
	static Stack<Character> st = new Stack<>();

	
	static void insert_at_bottom(char x)
	{

		if (st.isEmpty())
			st.push(x);

		else {

			
			char a = st.peek();
			st.pop();
			insert_at_bottom(x);

			
			st.push(a);
		}
	}

	
	static void reverse()
	{
		if (st.size() > 0) {

		
			char x = st.peek();
			st.pop();
			reverse();


			insert_at_bottom(x);
		}
	}

	
	public static void main(String[] args)
	{


		st.push('1');
		st.push('2');
		st.push('3');
		st.push('4');

		System.out.println("Original Stack");

		System.out.println(st);

		
		reverse();

		System.out.println("Reversed Stack");

		System.out.println(st);
	}
}







Q.5

class Stack {
	int size;
	int top;
	char[] a;

	
	boolean isEmpty() { return (top < 0); }

	Stack(int n)
	{
		top = -1;
		size = n;
		a = new char[size];
	}

	
	boolean push(char x)
	{
		if (top >= size) {
			System.out.println("Stack Overflow");
			return false;
		}
		else {
			a[++top] = x;
			return true;
		}
	}

	
	char pop()
	{
		if (top < 0) {
			System.out.println("Stack Underflow");
			return 0;
		}
		else {
			char x = a[top--];
			return x;
		}
	}
}


class Main {
	
	public static void reverse(StringBuffer str)
	{
		
		int n = str.length();
		Stack obj = new Stack(n);

		
		int i;
		for (i = 0; i < n; i++)
			obj.push(str.charAt(i));


		for (i = 0; i < n; i++) {
			char ch = obj.pop();
			str.setCharAt(i, ch);
		}
	}

	
	public static void main(String args[])
	{
		
		StringBuffer s = new StringBuffer("GeeksQuiz");


		reverse(s);

		
		System.out.println("Reversed string is " + s);
	}
}






Q.6

public class Solution {
	
	
	static int evaluatePostfix(String exp)
	{
		
		Stack<Integer> stack = new Stack<>();

		
		for (int i = 0; i < exp.length(); i++) {
			char c = exp.charAt(i);

			
			if (Character.isDigit(c))
				stack.push(c - '0');

			
			else {
				int val1 = stack.pop();
				int val2 = stack.pop();

				switch (c) {
				case '+':
					stack.push(val2 + val1);
					break;
				case '-':
					stack.push(val2 - val1);
					break;
				case '/':
					stack.push(val2 / val1);
					break;
				case '*':
					stack.push(val2 * val1);
					break;
				}
			}
		}
		return stack.pop();
	}

	
	public static void main(String[] args)
	{
		String exp = "231*+9-";
	
		
		System.out.println("postfix evaluation: "+ evaluatePostfix(exp));
	}
}

