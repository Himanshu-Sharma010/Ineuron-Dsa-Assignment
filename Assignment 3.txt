Q.1
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int n=nums.length;
        int minDiff=Integer.MAX_VALUE;
        int ans=0;
        for(int i=0;i<n-2;i++){
            int low=i+1,high=n-1;
            while(low<high){
                int temp=nums[i]+nums[low]+nums[high];
                if(Math.abs(target-temp)<minDiff){
                    ans=temp;
                    minDiff=Math.abs(target-temp);
                }
                if(temp==target){
                    return target;
                }
                else if(temp>target){
                        high--;
                }
                else{
                    low++;
                }
            }
        }
        return ans;
            
    }       
}





Q.2
public List<List<Integer>> fourSum(int[] nums, int target) {
    Arrays.sort(nums);
    Set<List<Integer>> set = new HashSet<>();
    for(int i = 0; i < nums.length; i++){
        for(int j = i+1; j < nums.length; j++){
            int start = j+1;
            int end = nums.length-1;
            while(end > start){
                int sum = nums[i]+ nums[j] + nums[start] + nums[end];
                if(sum == target){
                    set.add(Arrays.asList(nums[i], nums[j], nums[start++], nums[end--]));
                }
                else if (sum > target) end --;
                else start++;
            }
        }
    }
      return new ArrayList<>(set);	
}





Q.4

class Solution {
    public int searchInsert(int[] nums, int target) {
        
        int start = 0;
        int end = nums.length-1;
        while(start<=end){
            int mid = start + (end-start)/2;

            if(nums[mid]==target){
                return mid;
            }

            if(nums[mid]>target){
                end = mid - 1;
            }

            if(nums[mid]<target){
                start = mid + 1;
            }

            
          
        }

       
                return start;
            
    }
}








Q.5
class Solution {
    public int[] plusOne(int[] digits) {

			for (int i = digits.length - 1; i >= 0; i--) {
	if (digits[i] < 9) {
		digits[i]++;
		return digits;
	}
	digits[i] = 0;
}

digits = new int[digits.length + 1];
digits[0] = 1;
return digits;
		}
    
}




Q.6
class Solution {
    public int singleNumber(int[] nums) {
        int ans=0; //since XOR with 0 returns same number 
        for(int i=0; i<nums.length; i++){
            ans ^= nums[i];  // ans = (ans) XOR (array element at i) 
        }
        return ans;    
    }
}




Q.7
public List<String> summaryRanges(int[] nums) {
    int length = nums.length;
    List<String> result = new ArrayList<String>(length);
    for (int i = 0; i < length; i++) {
        int num = nums[i];
        while (i < length - 1 && nums[i] + 1 == nums[i + 1]) {
            i++;
        }
        if (num != nums[i]) {
            result.add(num + "->" + nums[i]);
        } else {
            result.add(num + "");
        }
    }
    return result;
}









