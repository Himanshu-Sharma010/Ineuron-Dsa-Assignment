Q.2
class Solution {
    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
        Set<Integer> s1 = new HashSet<Integer>();
        Set<Integer> s2 = new HashSet<Integer>();
        
        for(int i : nums1){
            s1.add(i);
        }
        for(int i : nums2){
            s2.add(i);
        }
        List<List<Integer>> ret = new ArrayList();
        ret.add(new ArrayList());
        ret.add(new ArrayList());
        for(int i : s1){
            if(!s2.contains(i)){
                ret.get(0).add(i);
            }
        }
        for(int i : s2){
            if(!s1.contains(i)){
                ret.get(1).add(i);
            }
        }
        
        return ret;
    }
}







Q.3
public int[][] transpose(int[][] A) {
	
	int M = A.length; int N = A[0].length;

	
	int[][] B = new int[N][M];

	
	for (int i = 0; i < M; i++) {
		for (int j = 0; j < N; j++) {
			
			B[j][i] = A[i][j];
		}
	}

	return B;
}





Q.4
class Solution {
    public int arrayPairSum(int[] nums) {
        Arrays.sort(nums);
        int result = 0;
        for (int i = 0; i < nums.length; i+=2) {
            result += nums[i];
        }
        return result;
    }
}





Q.5
class Solution {
    public int arrangeCoins(int n) {
        long low = 1, high = n;
        
        while(low <= high){
            long mid = low + (high-low)/2;
            long sum  = mid*(mid+1)/2;
            
            if(sum == n){
                return (int)mid;
            } else if(sum < n){
                low = mid+1;
            } else {
                high = mid-1;
            }
        }
        
        return (int)high;
    }
}






Q.6
class Solution {
    public int[] sortedSquares(int[] nums) {
        
        int[] answer = new int[nums.length];
        int i = 0, j = nums.length - 1, k = nums.length - 1;
        
        while (k >= 0) {
            if (Math.abs (nums[i]) > Math.abs (nums[j])) {
                answer[k--] = nums[i] * nums[i++];
            }
            else {
                answer[k--] = nums[j] * nums[j--];
            }
        }
        
        return answer;
    }
}


Q.8
class Solution {
    public int[] shuffle(int[] nums, int n) {
        int max = 1001; 
        
		
        for(int i=n;i<nums.length;i++){
            nums[i] = max*nums[i]+nums[i-n];
        }
        
		
        int ind = 0;
        for(int i=n;i<nums.length;i++){
            nums[ind] = nums[i]%max;
            nums[ind+1] = nums[i]/max;
            ind+=2;
        }
        
        return nums;
    }
}